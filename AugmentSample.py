{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"vR9gyhzLkO_L","executionInfo":{"status":"ok","timestamp":1710891071135,"user_tz":0,"elapsed":37310,"user":{"displayName":"mahfuj asif","userId":"08968040470481866067"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"21633ef1-a443-4318-a587-936287a5bb8c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Anomaly folder copied successfully!\n"]}],"source":["import cv2\n","import os\n","import shutil\n","import numpy as np\n","from google.colab import drive\n","\n","\n","# drive.mount('/content/drive')\n","\n","#The folder that contains 100 anomaly images\n","src = \"/content/drive/MyDrive/Colab Notebooks/faulty-product-detection/Data/Unprocessed/Anomaly\"\n","\n","#destination path\n","aug = \"/content/drive/MyDrive/Colab Notebooks/faulty-product-detection/Data/Augmented_Anomaly_v3\"\n","\n","\n","#Copies 100 images from src to aug folder\n","shutil.copytree(src, aug)\n","print(\"Anomaly folder copied successfully!\")\n","\n","\n","#Define the nine angles\n","angles = [40, 80, 120, 160]\n","\n","#The pixel value of the centre of the image.\n","center = (750, 500)\n","\n","#Imagine a circle from the centre(750,500) with rdius of 500px, only this area will be rotated\n","radius = 500\n","\n","#Loop through all imges in folder\n","for image_file in os.listdir(aug):\n","  #Join the folder with image name to get the full image path\n","  image_path = os.path.join(aug, image_file)\n","\n","  #Read image using cv2 library\n","  image = cv2.imread(image_path)\n","\n","  #mask\n","  mask = np.zeros_like(image[:, :, 0])\n","\n","  #This code draws the circle on the mask with previously specified centre, and radius\n","\n","  cv2.circle(mask, center, radius, (255, 255, 255), -1)\n","\n","  for angle in angles:\n","\n","\n","    #First we need to define a rotation matrix specifying the centre, angle and scale\n","    rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1)\n","\n","    #This code rotates the entire image and puts it into the rotated_circular_part variable, this new image is rectangular\n","\n","    rotated_circular_part = cv2.warpAffine(image, rotation_matrix, (image.shape[1], image.shape[0]))\n","\n","    #Now that we have rotated rectangular image, and circular mask we can combine them to get the image where\n","\n","\n","    #Bit wise AND operation with the mask\n","\n","    rotated_circular_part = cv2.bitwise_and(rotated_circular_part, rotated_circular_part, mask=mask)\n","\n","    #Finally bitwise OR operation of original and rotated image combines them together\n","\n","    result = cv2.bitwise_or(cv2.bitwise_and(image, image, mask=~mask), rotated_circular_part)\n","\n","    #Create path to save new image\n","    dst_path = os.path.join(aug, image_file)\n","\n","    #Split the extension so that we can add '_angle' to the file name\n","\n","    base, extn = os.path.splitext(dst_path)\n","    dst_path = base + '_' + str(angle) + extn\n","\n","    #save the image\n","    cv2.imwrite(dst_path, result)\n","\n"]}]}